Query: 
        SELECT m.id, m.title, g.id, g.name, c.id, c.name
        FROM movies AS m CROSS JOIN genres g CROSS JOIN countries c
        WHERE m.id >= 3 AND g.id = 2 AND c.id != 'us'
    

AST: Select {
    select: SelectClause {
        expressions: [
            Field(
                Some(
                    "m",
                ),
                "id",
            ),
            Field(
                Some(
                    "m",
                ),
                "title",
            ),
            Field(
                Some(
                    "g",
                ),
                "id",
            ),
            Field(
                Some(
                    "g",
                ),
                "name",
            ),
            Field(
                Some(
                    "c",
                ),
                "id",
            ),
            Field(
                Some(
                    "c",
                ),
                "name",
            ),
        ],
        labels: [
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    },
    from: Some(
        FromClause {
            items: [
                Join {
                    left: Join {
                        left: Table {
                            name: "movies",
                            alias: Some(
                                "m",
                            ),
                        },
                        right: Table {
                            name: "genres",
                            alias: Some(
                                "g",
                            ),
                        },
                        type: Cross,
                        predicate: None,
                    },
                    right: Table {
                        name: "countries",
                        alias: Some(
                            "c",
                        ),
                    },
                    type: Cross,
                    predicate: None,
                },
            ],
        },
    ),
    where: Some(
        WhereClause(
            Operation(
                And(
                    Operation(
                        And(
                            Operation(
                                GreaterThanOrEqual(
                                    Field(
                                        Some(
                                            "m",
                                        ),
                                        "id",
                                    ),
                                    Literal(
                                        Integer(
                                            3,
                                        ),
                                    ),
                                ),
                            ),
                            Operation(
                                Equal(
                                    Field(
                                        Some(
                                            "g",
                                        ),
                                        "id",
                                    ),
                                    Literal(
                                        Integer(
                                            2,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ),
                    Operation(
                        NotEqual(
                            Field(
                                Some(
                                    "c",
                                ),
                                "id",
                            ),
                            Literal(
                                String(
                                    "us",
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
    ),
    group_by: None,
    having: None,
    order: [],
    limit: None,
    offset: None,
}

Plan: Plan(
    Projection {
        source: Filter {
            source: NestedLoopJoin {
                outer: NestedLoopJoin {
                    outer: Scan {
                        table: "movies",
                        label: "m",
                        filter: None,
                    },
                    inner: Scan {
                        table: "genres",
                        label: "g",
                        filter: None,
                    },
                    predicate: None,
                    pad: false,
                    flip: false,
                },
                inner: Scan {
                    table: "countries",
                    label: "c",
                    filter: None,
                },
                predicate: None,
                pad: false,
                flip: false,
            },
            predicate: And(
                And(
                    Or(
                        GreaterThan(
                            Field(
                                0,
                                Some(
                                    (
                                        Some(
                                            "m",
                                        ),
                                        "id",
                                    ),
                                ),
                            ),
                            Constant(
                                Integer(
                                    3,
                                ),
                            ),
                        ),
                        Equal(
                            Field(
                                0,
                                Some(
                                    (
                                        Some(
                                            "m",
                                        ),
                                        "id",
                                    ),
                                ),
                            ),
                            Constant(
                                Integer(
                                    3,
                                ),
                            ),
                        ),
                    ),
                    Equal(
                        Field(
                            7,
                            Some(
                                (
                                    Some(
                                        "g",
                                    ),
                                    "id",
                                ),
                            ),
                        ),
                        Constant(
                            Integer(
                                2,
                            ),
                        ),
                    ),
                ),
                Not(
                    Equal(
                        Field(
                            9,
                            Some(
                                (
                                    Some(
                                        "c",
                                    ),
                                    "id",
                                ),
                            ),
                        ),
                        Constant(
                            String(
                                "us",
                            ),
                        ),
                    ),
                ),
            ),
        },
        labels: [
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        expressions: [
            Field(
                0,
                Some(
                    (
                        Some(
                            "m",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                1,
                Some(
                    (
                        Some(
                            "m",
                        ),
                        "title",
                    ),
                ),
            ),
            Field(
                7,
                Some(
                    (
                        Some(
                            "g",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                8,
                Some(
                    (
                        Some(
                            "g",
                        ),
                        "name",
                    ),
                ),
            ),
            Field(
                9,
                Some(
                    (
                        Some(
                            "c",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                10,
                Some(
                    (
                        Some(
                            "c",
                        ),
                        "name",
                    ),
                ),
            ),
        ],
    },
)

Optimized plan: Plan(
    Projection {
        source: NestedLoopJoin {
            outer: NestedLoopJoin {
                outer: Scan {
                    table: "movies",
                    label: "m",
                    filter: None,
                },
                inner: Scan {
                    table: "genres",
                    label: "g",
                    filter: None,
                },
                predicate: None,
                pad: false,
                flip: false,
            },
            inner: Scan {
                table: "countries",
                label: "c",
                filter: None,
            },
            predicate: Some(
                And(
                    And(
                        Or(
                            GreaterThan(
                                Field(
                                    0,
                                    Some(
                                        (
                                            Some(
                                                "m",
                                            ),
                                            "id",
                                        ),
                                    ),
                                ),
                                Constant(
                                    Integer(
                                        3,
                                    ),
                                ),
                            ),
                            Equal(
                                Field(
                                    0,
                                    Some(
                                        (
                                            Some(
                                                "m",
                                            ),
                                            "id",
                                        ),
                                    ),
                                ),
                                Constant(
                                    Integer(
                                        3,
                                    ),
                                ),
                            ),
                        ),
                        Equal(
                            Field(
                                7,
                                Some(
                                    (
                                        Some(
                                            "g",
                                        ),
                                        "id",
                                    ),
                                ),
                            ),
                            Constant(
                                Integer(
                                    2,
                                ),
                            ),
                        ),
                    ),
                    Not(
                        Equal(
                            Field(
                                9,
                                Some(
                                    (
                                        Some(
                                            "c",
                                        ),
                                        "id",
                                    ),
                                ),
                            ),
                            Constant(
                                String(
                                    "us",
                                ),
                            ),
                        ),
                    ),
                ),
            ),
            pad: false,
            flip: false,
        },
        labels: [
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        expressions: [
            Field(
                0,
                Some(
                    (
                        Some(
                            "m",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                1,
                Some(
                    (
                        Some(
                            "m",
                        ),
                        "title",
                    ),
                ),
            ),
            Field(
                7,
                Some(
                    (
                        Some(
                            "g",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                8,
                Some(
                    (
                        Some(
                            "g",
                        ),
                        "name",
                    ),
                ),
            ),
            Field(
                9,
                Some(
                    (
                        Some(
                            "c",
                        ),
                        "id",
                    ),
                ),
            ),
            Field(
                10,
                Some(
                    (
                        Some(
                            "c",
                        ),
                        "name",
                    ),
                ),
            ),
        ],
    },
)

Query: 
        SELECT m.id, m.title, g.id, g.name, c.id, c.name
        FROM movies AS m CROSS JOIN genres g CROSS JOIN countries c
        WHERE m.id >= 3 AND g.id = 2 AND c.id != 'us'
    

Result: ["id", "title", "id", "name", "id", "name"]
[Integer(3), String("Primer"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(3), String("Primer"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(4), String("Heat"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(4), String("Heat"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(5), String("The Fountain"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(5), String("The Fountain"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(6), String("Solaris"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(6), String("Solaris"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(7), String("Gravity"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(7), String("Gravity"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(8), String("Blindspotting"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(8), String("Blindspotting"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(9), String("Birdman"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(9), String("Birdman"), Integer(2), String("Action"), String("ru"), String("Russia")]
[Integer(10), String("Inception"), Integer(2), String("Action"), String("fr"), String("France")]
[Integer(10), String("Inception"), Integer(2), String("Action"), String("ru"), String("Russia")]
